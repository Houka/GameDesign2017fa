function getLogging() {
    function e() {
        var e = "http://gdiac.cs.cornell.edu/cs4154/fall2017/",
            t = "page_load.php",
            r = "player_action.php",
            i = "player_quest.php",
            n = "player_quest_end.php",
            o = "record_abtest.php",
            a = {
                STATUS_UNINITIALIZED: 0,
                STATUS_LEVEL_NOT_STARTED: 1,
                STATUS_LEVEL_IN_PROGRESS: 2
            },
            s = 0,
            l = !1,
            d = null,
            u = 0,
            _ = !1,
            c = "",
            T = "",
            S = 1,
            g = "",
            f = 0,
            v = 1,
            E = a.STATUS_UNINITIALIZED,
            I = !1;
        this.initialize = function(e, t, r, i) {
            i && (I = i), s = e, u = t, _ = r, _ || (c = localStorage.getItem("user_id"), c || (c = A(40)), T = A(36), E = a.STATUS_LEVEL_NOT_STARTED)
        };
        var L = function(e) {
                I || console.log(e)
            },
            A = function(e) {
                for (var t = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", r = t.length - 1, i = "", n = 0; e > n; n++) i += t.charAt(Math.floor(Math.random() * r));
                return i
            },
            m = function() {
                return (new Date).getTime()
            },
            h = function(e, t) {
                $.ajax({
                    url: t,
                    dataType: "jsonp",
                    success: function(t) {
                        I || L(e + ": Sent w/ the following server response: " + JSON.stringify(t))
                    },
                    error: function(t) {
                        I || L("error" == t.statusText ? e + ": Could not connect to server at all." : e + ": Failed with the following server response: " + t.statusText)
                    },
                    jsonp: "jsonp"
                })
            };
        this.assignABTestValue = function(e) {
            return _ ? e : (localStorage.getItem("ab_test_value") ? d = localStorage.getItem("ab_test_value") : (d = e, localStorage.setItem("ab_test_value", d)), l = !0, d)
        }, this.recordABTestValue = function() {
            if (E == a.STATUS_UNINITIALIZED) return void(_ || L("recordABTestValue: You must call initialize() before recording anything!"));
            if (!l) return void(_ || L("recordABTestValue: You must call assignABTestValue before recording the A/B test value!"));
            var t = e + o + "?game_id=" + s + "&user_id=" + c + "&abvalue=" + d;
            h("recordABTestValue", t)
        }, this.recordPageLoad = function(r) {
            if (E == a.STATUS_UNINITIALIZED) return void(_ || L("recordPageLoad: You must call initialize() before recording anything!"));
            "undefined" == typeof r && (r = "");
            var i = e + t + "?game_id=" + s + "&client_timestamp=" + m() + "&user_info=" + r + "&version_id=" + u + "&user_id=" + c + "&session_id=" + T;
            h("recordPageLoad", i), localStorage.setItem("user_id", c), localStorage.setItem("session_id", T)
        }, this.recordLevelStart = function(t, r) {
            if (E != a.STATUS_LEVEL_NOT_STARTED) return void(_ || L(E == a.STATUS_UNINITIALIZED ? "recordLevelStart: You must call initialize() before recording anything!" : "recordLevelStart: You can't start a level before you end the last one."));
            "undefined" == typeof r && (r = ""), g = A(40);
            var n = e + i + "?game_id=" + s + "&client_timestamp=" + m() + "&quest_id=" + t + "&user_id=" + c + "&session_id=" + T + "&session_seq_id=" + S + "&version_id=" + u + "&quest_detail=" + r + "&dynamic_quest_id=" + g;
            h("recordLevelStart", n), S++, v = 1, E = a.STATUS_LEVEL_IN_PROGRESS
        }, this.recordLevelEnd = function() {
            if (E != a.STATUS_LEVEL_IN_PROGRESS) return void(_ || L(E == a.STATUS_UNINITIALIZED ? "recordLevelEnd: You must call initialize before recording anything!" : "recordLevelEnd: You must start a level before ending!"));
            var t = e + n + "?dynamic_quest_id=" + g;
            h("recordLevelEnd", t), S++, v = 1, E = a.STATUS_LEVEL_NOT_STARTED
        }, this.recordEvent = function(t, i) {
            if (E != a.STATUS_LEVEL_IN_PROGRESS) return void(_ || L(E == a.STATUS_UNINITIALIZED ? "recordEvent: You must call initialize before recording anything!" : "recordEvent: You must start a level before recording an event!"));
            "undefined" == typeof i && (i = "");
            var n = e + r + "?game_id=" + s + "&client_timestamp=" + m() + "&quest_id=" + f + "&user_id=" + c + "&action_id=" + t + "&session_seq_id=" + S + "&quest_seq_id=" + v + "&action_detail=" + i + "&dynamic_quest_id=" + g;
            h("recordEvent", n), S++, v++
        }
    }
    return arguments.callee._singleton || (arguments.callee._singleton = new e), arguments.callee._singleton
}